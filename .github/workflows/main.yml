name: Backend Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy backend via SSH + SCP
        env:
          DEV_SFTP_PRIVATE_KEY: ${{ secrets.DEV_SFTP_PRIVATE_KEY }}
          DEV_HOST: ${{ secrets.DEV_HOST }}
          DEV_USER: ${{ secrets.DEV_USER }}
          DEPLOY_DIR: ${{ secrets.DEPLOY_DIR }}
          ENV: ${{ secrets.ENV }}
          ENV_FILE: ${{ secrets.ENV_FILE }}
          APP_NAME: ${{ secrets.APP_NAME }}
          START_FILE_PATH: ${{ secrets.START_FILE_PATH }}
          NPM_BASE_COMMAND: ${{ secrets.NPM_BASE_COMMAND }}
          PM2_BASE_COMMAND: ${{ secrets.PM2_BASE_COMMAND }}
        shell: bash
        run: |
          # 1. Write private key
          echo "$DEV_SFTP_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          # 2. Save ENV content as temp file (multiline support)
          echo "$ENV" > local_env_file.env
          # 3. Clean remote dir
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${DEV_USER}@${DEV_HOST} "rm -rf ${DEPLOY_DIR}/* && mkdir -p ${DEPLOY_DIR} && mkdir -p \$(dirname ${DEPLOY_DIR}/${ENV_FILE})"
          # 4. Copy files and env
          scp -i private_key.pem -o StrictHostKeyChecking=no -r ./* ${DEV_USER}@${DEV_HOST}:${DEPLOY_DIR}/
          scp -i private_key.pem -o StrictHostKeyChecking=no local_env_file.env ${DEV_USER}@${DEV_HOST}:${DEPLOY_DIR}/${ENV_FILE}

          # 
          cat > deploy_script.sh << EOF
          cd $DEPLOY_DIR
          $NPM_BASE_COMMAND install
          $NPM_BASE_COMMAND audit fix --force
          
          # Run npm update to resolve dependency vulnerabilities
          $NPM_BASE_COMMAND update semver simple-update-notifier nodemon --depth 5
          
          export NODE_ENV=production
          if ! command -v $PM2_BASE_COMMAND &> /dev/null; then
            echo "PM2 not found, installing globally..."
            $NPM_BASE_COMMAND install -g pm2
          fi
          
          if pm2 status | grep -q "$APP_NAME"; then
            echo "Restarting existing PM2 process..."
            pm2 restart "$APP_NAME"
          else
            echo "Starting new PM2 process..."
            pm2 start $START_FILE_PATH --name "$APP_NAME"
          fi
          pm2 save
          EOF
          
          # Make script executable and execute it remotely
          chmod +x deploy_script.sh
          ssh -i private_key.pem -o StrictHostKeyChecking=no $DEV_USER@$DEV_HOST 'bash -s' < deploy_script.sh
          
          # 5. Cleanup
          rm private_key.pem local_env_file.env
